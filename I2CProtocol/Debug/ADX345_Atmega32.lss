
ADX345_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  0000040c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009ee  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ea  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000364  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c5  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000243  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8a:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmnd>:

unsigned char xyz_values[6];

void LCD_cmnd(unsigned char cmnd)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0); //send upper 4 bit
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	28 2f       	mov	r18, r24
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); //0b11111011 //RS = 0
  9e:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	e7 ec       	ldi	r30, 0xC7	; 199
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_cmnd+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_cmnd+0x1a>
  ac:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  ae:	db 98       	cbi	0x1b, 3	; 27
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	f3 e0       	ldi	r31, 0x03	; 3
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_cmnd+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_cmnd+0x28>
  ba:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); //send lower 4 bit
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	92 2f       	mov	r25, r18
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  ce:	db 9a       	sbi	0x1b, 3	; 27
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_cmnd+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_cmnd+0x48>
  da:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  dc:	db 98       	cbi	0x1b, 3	; 27
  de:	08 95       	ret

000000e0 <LCD_data>:
}
void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	28 2f       	mov	r18, r24
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	92 2b       	or	r25, r18
  ea:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; //0b00000100 //RS = 1
  ec:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	e7 ec       	ldi	r30, 0xC7	; 199
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_data+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_data+0x1a>
  fa:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
  fc:	db 98       	cbi	0x1b, 3	; 27
  fe:	ef e3       	ldi	r30, 0x3F	; 63
 100:	ff e1       	ldi	r31, 0x1F	; 31
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_data+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_data+0x28>
 108:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
 10a:	2b b3       	in	r18, 0x1b	; 27
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	92 2f       	mov	r25, r18
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
 11c:	db 9a       	sbi	0x1b, 3	; 27
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9f e1       	ldi	r25, 0x1F	; 31
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_data+0x42>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_data+0x48>
 128:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 12a:	db 98       	cbi	0x1b, 3	; 27
 12c:	08 95       	ret

0000012e <LCD_initialize>:
}
void LCD_initialize(void)
{
	LCD_DATA_DDR = 0xFC;
 12e:	8c ef       	ldi	r24, 0xFC	; 252
 130:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111;
 132:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <LCD_initialize+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_initialize+0x16>
 144:	00 00       	nop
	_delay_ms(200);
	LCD_cmnd(0x33);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <LCD_initialize+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_initialize+0x2e>
 15c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x32);
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_initialize+0x3c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_initialize+0x46>
 174:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x28);
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 ef       	ldi	r24, 0xF9	; 249
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <LCD_initialize+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_initialize+0x5e>
 18c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0E);
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_initialize+0x6c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_initialize+0x76>
 1a4:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_initialize+0x84>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_initialize+0x8e>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <LCD_clear>:
	_delay_ms(20);
}
void LCD_clear(void)
{
	LCD_cmnd(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9f e1       	ldi	r25, 0x1F	; 31
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_clear+0xa>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_clear+0x10>
 1d0:	00 00       	nop
 1d2:	08 95       	ret

000001d4 <LCD_print>:
	_delay_ms(2);
}
void LCD_print(char * str)
{
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	81 f0       	breq	.+32     	; 0x202 <LCD_print+0x2e>
	LCD_cmnd(0x01);
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
 1e2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_data(str[i]);
 1e4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
		i++;
 1e8:	1f 5f       	subi	r17, 0xFF	; 255
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_print+0x1a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_print+0x20>
 1f4:	00 00       	nop
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	81 11       	cpse	r24, r1
 200:	f1 cf       	rjmp	.-30     	; 0x1e4 <LCD_print+0x10>
	{
		LCD_data(str[i]);
		i++;
		_delay_ms(5);
	}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	08 95       	ret

0000020a <LCD_num>:
	LCD_cmnd(0x7F+x);
	else if(y==2)
	LCD_cmnd(0xBF+x);
}
void LCD_num(unsigned char num1)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	c8 2f       	mov	r28, r24
	LCD_data(num1/10 + 0x30);
 210:	dd ec       	ldi	r29, 0xCD	; 205
 212:	8d 9f       	mul	r24, r29
 214:	d1 2d       	mov	r29, r1
 216:	11 24       	eor	r1, r1
 218:	d6 95       	lsr	r29
 21a:	d6 95       	lsr	r29
 21c:	d6 95       	lsr	r29
 21e:	8d 2f       	mov	r24, r29
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
	LCD_data(num1%10 + 0x30);
 226:	dd 0f       	add	r29, r29
 228:	8d 2f       	mov	r24, r29
 22a:	88 0f       	add	r24, r24
 22c:	88 0f       	add	r24, r24
 22e:	d8 0f       	add	r29, r24
 230:	8c 2f       	mov	r24, r28
 232:	8d 1b       	sub	r24, r29
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <i2c_init>:

void i2c_init()
{
	TWSR = 0x00;
 240:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x47;
 242:	87 e4       	ldi	r24, 0x47	; 71
 244:	80 b9       	out	0x00, r24	; 0
	TWCR = 0x04;
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	86 bf       	out	0x36, r24	; 54
 24a:	08 95       	ret

0000024c <i2c_start>:
}

void i2c_start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 24c:	84 ea       	ldi	r24, 0xA4	; 164
 24e:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1<<TWINT)) == 0);
 250:	06 b6       	in	r0, 0x36	; 54
 252:	07 fe       	sbrs	r0, 7
 254:	fd cf       	rjmp	.-6      	; 0x250 <i2c_start+0x4>
}
 256:	08 95       	ret

00000258 <i2c_stop>:

void i2c_stop()
{
	TWCR = (1<< TWINT) | (1<<TWEN) | (1<<TWSTO);
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	86 bf       	out	0x36, r24	; 54
 25c:	08 95       	ret

0000025e <i2c_write>:
}

void i2c_write(unsigned char data)
{
	TWDR = data;
 25e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1<<TWINT)) == 0);
 264:	06 b6       	in	r0, 0x36	; 54
 266:	07 fe       	sbrs	r0, 7
 268:	fd cf       	rjmp	.-6      	; 0x264 <i2c_write+0x6>
}
 26a:	08 95       	ret

0000026c <i2c_read>:

unsigned char i2c_read(unsigned char isLast)
{
	if (isLast == 0)
 26c:	81 11       	cpse	r24, r1
 26e:	03 c0       	rjmp	.+6      	; 0x276 <i2c_read+0xa>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (TWEA);
 270:	86 e8       	ldi	r24, 0x86	; 134
 272:	86 bf       	out	0x36, r24	; 54
 274:	02 c0       	rjmp	.+4      	; 0x27a <i2c_read+0xe>
	}
	else
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
 276:	84 e8       	ldi	r24, 0x84	; 132
 278:	86 bf       	out	0x36, r24	; 54
	}
	while ((TWCR & (1<<TWINT)) == 0);
 27a:	06 b6       	in	r0, 0x36	; 54
 27c:	07 fe       	sbrs	r0, 7
 27e:	fd cf       	rjmp	.-6      	; 0x27a <i2c_read+0xe>
	return TWDR;
 280:	83 b1       	in	r24, 0x03	; 3
}
 282:	08 95       	ret

00000284 <main>:

int main(void)
{
	LCD_initialize();
 284:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_initialize>
	LCD_print("ADXL345 Test");
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	87 ea       	ldi	r24, 0xA7	; 167
 294:	91 e6       	ldi	r25, 0x61	; 97
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x12>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x1c>
 2a0:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
 2a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_clear>
	i2c_init();
 2a6:	0e 94 20 01 	call	0x240	; 0x240 <i2c_init>
	i2c_start();
 2aa:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	i2c_write(0x53);
 2ae:	83 e5       	ldi	r24, 0x53	; 83
 2b0:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	//LCD_print("1");
	i2c_stop();
 2b4:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	i2c_start();
 2b8:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	i2c_write(0x2D);
 2bc:	8d e2       	ldi	r24, 0x2D	; 45
 2be:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	LCD_print("2");	
 2c2:	8d e6       	ldi	r24, 0x6D	; 109
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
	i2c_write(0x00);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_stop();
 2d0:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	i2c_start();
 2d4:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	i2c_write(0x53);
 2d8:	83 e5       	ldi	r24, 0x53	; 83
 2da:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_write(0x2D);
 2de:	8d e2       	ldi	r24, 0x2D	; 45
 2e0:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_write(0x10);
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_stop();
 2ea:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	i2c_start();
 2ee:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	i2c_write(0x53);
 2f2:	83 e5       	ldi	r24, 0x53	; 83
 2f4:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_write(0x2D);
 2f8:	8d e2       	ldi	r24, 0x2D	; 45
 2fa:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_write(0x08);
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	i2c_stop();
 304:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	LCD_print("here");
 308:	8f e6       	ldi	r24, 0x6F	; 111
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
	   i2c_write(xyz_register);
	   i2c_stop();
	   
	   i2c_start();
	   i2c_write(0x53);
	   xyz_values[0]=i2c_read(1);
 310:	c4 e7       	ldi	r28, 0x74	; 116
 312:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
       int xyz_register = 0x32;
	   //int x,y,z;
	   
	   i2c_start();
 314:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	   i2c_write(0x53);
 318:	83 e5       	ldi	r24, 0x53	; 83
 31a:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	   i2c_write(xyz_register);
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	   i2c_stop();
 324:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	   
	   i2c_start();
 328:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_start>
	   i2c_write(0x53);
 32c:	83 e5       	ldi	r24, 0x53	; 83
 32e:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_write>
	   xyz_values[0]=i2c_read(1);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_read>
 338:	88 83       	st	Y, r24
	   i2c_stop();
 33a:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	   LCD_num(xyz_values[0]);
 33e:	88 81       	ld	r24, Y
 340:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_num>
	   LCD_print("here");
 344:	8f e6       	ldi	r24, 0x6F	; 111
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	87 ea       	ldi	r24, 0xA7	; 167
 350:	91 e6       	ldi	r25, 0x61	; 97
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0xce>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0xd8>
 35c:	00 00       	nop
 35e:	da cf       	rjmp	.-76     	; 0x314 <main+0x90>

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
